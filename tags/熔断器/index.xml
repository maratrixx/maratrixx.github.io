<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>熔断器 on MARATRIX BLOG</title>
    <link>https://maratrix.cn/tags/%E7%86%94%E6%96%AD%E5%99%A8/</link>
    <description>Recent content in 熔断器 on MARATRIX BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 28 Jan 2021 09:23:28 +0800</lastBuildDate><atom:link href="https://maratrix.cn/tags/%E7%86%94%E6%96%AD%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>hystrix-go 之流量控制实现</title>
      <link>https://maratrix.cn/post/2021/01/28/hystrix-go-flow-contorl-read/</link>
      <pubDate>Thu, 28 Jan 2021 09:23:28 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/01/28/hystrix-go-flow-contorl-read/</guid>
      <description>在分析 hystrix-go 主流程中，我们知道只有当获取令牌成功后才能继续往下正常执行用户自定义的闭包函数，否则还是会进行降级处理。 1 cmd.ticket = &amp;lt;-circuit.executorPool.Tickets: // 获取令牌成功 今天我们分析下，hystrix-go 是如何进行流量控制的。 源码分析</description>
    </item>
    
    <item>
      <title>hystrix-go 之核心流程实现</title>
      <link>https://maratrix.cn/post/2021/01/24/hystrix-go-source-read/</link>
      <pubDate>Sun, 24 Jan 2021 10:36:09 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/01/24/hystrix-go-source-read/</guid>
      <description>前言 上一篇文章我们介绍了服务保护熔断器 sentinel-go 如何使用，今天介绍另外一款优秀的集限流、熔断、降级于一身的组件 hystrix-go。hystrix-go 是著名开源库 hystrix 的 Go 语言简化版本，实现了核心功能，源码实现</description>
    </item>
    
    <item>
      <title>sentinel-go 之熔断降级</title>
      <link>https://maratrix.cn/post/2021/01/20/sentinel-circuit-breaker-notes/</link>
      <pubDate>Wed, 20 Jan 2021 09:25:05 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/01/20/sentinel-circuit-breaker-notes/</guid>
      <description>在高可用设计中，除了流控外，对分布式系统调用链路中不稳定的资源(比如 RPC 服务等)进行熔断降级也是保障高可用的重要措施之一。 现代微服务架构基本都是分布式的，整个分布式系统由非常多的微服务组成。不同服务之间</description>
    </item>
    
  </channel>
</rss>
