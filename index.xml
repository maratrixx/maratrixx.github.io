<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MARATRIX BLOG</title>
    <link>https://maratrix.cn/</link>
    <description>Recent content on MARATRIX BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 27 Mar 2022 13:36:59 +0800</lastBuildDate><atom:link href="https://maratrix.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go 泛型编程: interface 不再是那个 interface</title>
      <link>https://maratrix.cn/post/2022/03/27/go-generics-interface/</link>
      <pubDate>Sun, 27 Mar 2022 13:36:59 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2022/03/27/go-generics-interface/</guid>
      <description>原文链接：https://colobu.com/2022/01/08/the-interface-is-not-that-interface-in-go-1-18/ 自 Go 1.18 支持泛型后， Go interface 的意义已经彻彻</description>
    </item>
    
    <item>
      <title>Go 泛型编程：泛型设计</title>
      <link>https://maratrix.cn/post/2022/03/27/go-generics-design/</link>
      <pubDate>Sun, 27 Mar 2022 13:14:09 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2022/03/27/go-generics-design/</guid>
      <description>原文链接：https://golang3.eddycjy.com/posts/generics/ 引言 Go1.18 的泛型是闹得沸沸扬扬，如今已经基本成型，就由煎鱼带大家一起摸透 Go 泛型。 本文内容主要涉及泛型的 3 大设</description>
    </item>
    
    <item>
      <title>迄今为止最舒适的阅读模式</title>
      <link>https://maratrix.cn/post/2022/01/26/nice-reading-pattern/</link>
      <pubDate>Wed, 26 Jan 2022 17:05:55 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2022/01/26/nice-reading-pattern/</guid>
      <description>在经历了使用过 Kindle、得到等一系列电子阅读器后，终于找到了一种比较舒适的阅读模式：微信读书。 微信读书的界面比较简洁，使用起来比较清爽，没那么花哨，这个仁者见仁不再多说。 下面说下本人是如何使用的。</description>
    </item>
    
    <item>
      <title>Kratos 源码分析（一）|日志组件设计与实现</title>
      <link>https://maratrix.cn/post/2022/01/10/kratos-logger-design/</link>
      <pubDate>Mon, 10 Jan 2022 09:13:21 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2022/01/10/kratos-logger-design/</guid>
      <description>本文基于 kratos v2.1.3 设计理念 为了方便使用，Kratos 定义了两个层面的抽象，Logger 统一了日志的接入方式，Helper 接口统一的日志库的调用方式。 在不同的公司、使用不同的基础架构，可能对日志的打印方式、格</description>
    </item>
    
    <item>
      <title>再见 2021</title>
      <link>https://maratrix.cn/post/2021/12/30/2021-summary/</link>
      <pubDate>Thu, 30 Dec 2021 21:03:58 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/12/30/2021-summary/</guid>
      <description>过得真快，一眨眼 2021 年就要过去了，又到了一年一度的例行总结回顾时间。 个人方面 首先是技术，今年上半年的主要精力在服务框架和开源项目源码阅读上面，实现了自己的微服务框架 gms（Go Micro Service），另外就</description>
    </item>
    
    <item>
      <title>我的 MacOS 软件工具清单</title>
      <link>https://maratrix.cn/post/2021/12/26/macos-application-list/</link>
      <pubDate>Sun, 26 Dec 2021 09:10:04 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/12/26/macos-application-list/</guid>
      <description>日常使用 开发环境 名称 说明 下载安装 vscode 轻量级开发编辑器，支持多语言，开源免费，插件丰富 官网下载 goland 重量级开发 IDE，JetBrains 出品，生态完善 官网下载 终端工具 名称 说明 下载安装 tig 终端下更方便好用的 Git 文本</description>
    </item>
    
    <item>
      <title>[转]如何选择开源协议</title>
      <link>https://maratrix.cn/post/2021/05/15/how-to-choose-free-software-licenses/</link>
      <pubDate>Sat, 15 May 2021 10:51:27 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/05/15/how-to-choose-free-software-licenses/</guid>
      <description>如何为代码选择开源许可证，这是一个问题。 世界上的开源许可证，大概有上百种。很少有人搞得清楚它们的区别。即使在最流行的六种 &amp;mdash;- GPL、BSD、MIT、Mozilla、Apache 和 LGPL&amp;mdash;- 之中做选择，也很复杂。</description>
    </item>
    
    <item>
      <title>如何获取Go服务依赖包</title>
      <link>https://maratrix.cn/post/2021/04/28/go-deps/</link>
      <pubDate>Wed, 28 Apr 2021 18:38:26 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/04/28/go-deps/</guid>
      <description>在服务治理中，我们有时需要统计业务方服务的依赖包版本号使用情况，以便进行升级和版本兼容，通过 Go 官方提供的 debug.ReadBuildInfo 可以很方便的实现。 debug.ReadBuildInfo ReadBuildInfo 是 Go 标准库提供的方法，通过该方法可以读取打包程序的构建信息，里面就包括我</description>
    </item>
    
    <item>
      <title>[转]跟我一起写 Makefile</title>
      <link>https://maratrix.cn/post/2021/04/09/gnu-makefile/</link>
      <pubDate>Fri, 09 Apr 2021 09:17:14 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/04/09/gnu-makefile/</guid>
      <description>本篇文章为转载，支持原创，请移步陈浩大神博客跟我一起写 Makefile。</description>
    </item>
    
    <item>
      <title>Prometheus学习笔记|03.四大度量指标了解与应用</title>
      <link>https://maratrix.cn/post/2021/03/17/go-metrics/</link>
      <pubDate>Wed, 17 Mar 2021 09:00:40 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/03/17/go-metrics/</guid>
      <description>什么是度量指标 度量是指对于一个物体或是事件的某个性质给予一个数字，使其可以和其他物体或是事件的相同性质比较。度量可以是对一物理量（如长度、尺寸或容量等）的估计或测定，也可以是其他较抽象的特质。 简单来讲</description>
    </item>
    
    <item>
      <title>Go1.16新特性|标准库和其他变化</title>
      <link>https://maratrix.cn/post/2021/03/10/go1.16-core-library-changes/</link>
      <pubDate>Wed, 10 Mar 2021 08:58:45 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/03/10/go1.16-core-library-changes/</guid>
      <description>支持静态资源嵌入 参见之前的文章：Go1.16新特性|embed静态资源嵌入 新增 io/fs 的支持 Go 1.16 标准库新增 io/fs 包，并定义了一个 fs.File 接口用于表示一个只读文件树 (tree of file) 的抽象。 io/fs 包的两个最重要的接口如下： 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>Go1.16新特性|Module功能新变化</title>
      <link>https://maratrix.cn/post/2021/03/10/go1.16-module/</link>
      <pubDate>Wed, 10 Mar 2021 08:06:49 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/03/10/go1.16-module/</guid>
      <description>Module 功能默认开启 在 Go 1.16 版本中，Go module-aware 模式成为了默认模式 (另一种则是传统的 gopath 模式)。module-aware 模式成为默认意味着什么呢？意味着 GO111MODULE 的值默认为 on 了。 这里将 Go 1.13 版本之前、Go 1.13 版本以及 Go 1.16 版本在 GO111MODULE</description>
    </item>
    
    <item>
      <title>Go1.16新特性|embed静态资源嵌入[转]</title>
      <link>https://maratrix.cn/post/2021/02/21/go-embed-syntax/</link>
      <pubDate>Sun, 21 Feb 2021 09:23:28 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/02/21/go-embed-syntax/</guid>
      <description>本文转自：https://colobu.com/2021/01/17/go-embed-tutorial/，并稍作修改。 Go 编译的程序非常适合部署，如果没有通过 CGO 引用其它的库的话，我们一般编译出来的可执</description>
    </item>
    
    <item>
      <title>Prometheus学习笔记|02.监控数据可视化</title>
      <link>https://maratrix.cn/post/2021/02/11/grafana-quick-start/</link>
      <pubDate>Thu, 11 Feb 2021 11:20:18 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/02/11/grafana-quick-start/</guid>
      <description>Prometheus UI 提供了快速验证 PromQL 以及临时可视化支持的能力，但其可视化能力却比较弱。一般情况下，我们都用 Grafana 来实现对 Prometheus 的可视化实现。 什么是Grafana Grafana 是一个开源的可视化平台，并且提供了对 Prometheus 的完整支持。 Grafana has become the wo</description>
    </item>
    
    <item>
      <title>Prometheus学习笔记|01.安装与快速入门</title>
      <link>https://maratrix.cn/post/2021/02/10/prometheus-expoter-install/</link>
      <pubDate>Wed, 10 Feb 2021 11:20:18 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/02/10/prometheus-expoter-install/</guid>
      <description>为了能够更加直观的了解 Prometheus Server，接下来我们将在本地部署并运行一个 Prometheus Server 实例，通过 Node Exporter 采集当前主机的系统资源使用情况。 本文基于 MacOS Go1.15.8 安装 Prometheus Server Prometheus 基于 Golang 编写、编译后的软件包，不依赖于任何的第三方依赖。用户</description>
    </item>
    
    <item>
      <title>Prometheus学习笔记|00.简介与原理</title>
      <link>https://maratrix.cn/post/2021/02/08/prometheus-intro/</link>
      <pubDate>Mon, 08 Feb 2021 11:20:18 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/02/08/prometheus-intro/</guid>
      <description>第一次接触并使用 Prometheus 是在上家公司（QTT）做一个商城项目，当然只是简单的使用并未过多的深入了解、学习。到现在，Prometheus 已经是服务监控领域的标配了，是时候深入好好研究总结一下它了。 服务治理有一</description>
    </item>
    
    <item>
      <title>hystrix-go 之流量控制实现</title>
      <link>https://maratrix.cn/post/2021/01/28/hystrix-go-flow-contorl-read/</link>
      <pubDate>Thu, 28 Jan 2021 09:23:28 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/01/28/hystrix-go-flow-contorl-read/</guid>
      <description>在分析 hystrix-go 主流程中，我们知道只有当获取令牌成功后才能继续往下正常执行用户自定义的闭包函数，否则还是会进行降级处理。 1 cmd.ticket = &amp;lt;-circuit.executorPool.Tickets: // 获取令牌成功 今天我们分析下，hystrix-go 是如何进行流量控制的。 源码分析</description>
    </item>
    
    <item>
      <title>hystrix-go 之统计控制器实现</title>
      <link>https://maratrix.cn/post/2021/01/27/hystrix-go-metrics-read/</link>
      <pubDate>Wed, 27 Jan 2021 08:45:02 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/01/27/hystrix-go-metrics-read/</guid>
      <description>上一篇 我们分析断路器时有用到 metricExchange，但并未展开详细介绍，本篇我们主要介绍它以及实现原理。 metricExchange 主要是用来收集处理上报的所有事件，并对事件进行汇总处理，最后根据计算出来的一段时间内的错</description>
    </item>
    
    <item>
      <title>hystrix-go 之断路器实现</title>
      <link>https://maratrix.cn/post/2021/01/25/hystrix-go-circuit-read/</link>
      <pubDate>Mon, 25 Jan 2021 22:31:12 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/01/25/hystrix-go-circuit-read/</guid>
      <description>上一篇我们分析 hystrix-go 主流程时知道，对于每个 command 都有一个对应的断路器，而且在 GoC 中首先要通过 GetCircuit(name) 获取断路器对象，该方法会在断路器不存在时新建一个，并赋值给 cmd.circuit。 回顾下 command 结构体： 1 2 3 4 5 type command struct {</description>
    </item>
    
    <item>
      <title>hystrix-go 之核心流程实现</title>
      <link>https://maratrix.cn/post/2021/01/24/hystrix-go-source-read/</link>
      <pubDate>Sun, 24 Jan 2021 10:36:09 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/01/24/hystrix-go-source-read/</guid>
      <description>前言 上一篇文章我们介绍了服务保护熔断器 sentinel-go 如何使用，今天介绍另外一款优秀的集限流、熔断、降级于一身的组件 hystrix-go。hystrix-go 是著名开源库 hystrix 的 Go 语言简化版本，实现了核心功能，源码实现</description>
    </item>
    
    <item>
      <title>sentinel-go 之熔断降级</title>
      <link>https://maratrix.cn/post/2021/01/20/sentinel-circuit-breaker-notes/</link>
      <pubDate>Wed, 20 Jan 2021 09:25:05 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/01/20/sentinel-circuit-breaker-notes/</guid>
      <description>在高可用设计中，除了流控外，对分布式系统调用链路中不稳定的资源(比如 RPC 服务等)进行熔断降级也是保障高可用的重要措施之一。 现代微服务架构基本都是分布式的，整个分布式系统由非常多的微服务组成。不同服务之间</description>
    </item>
    
    <item>
      <title>sentinel-go 之流量控制</title>
      <link>https://maratrix.cn/post/2021/01/19/sentinel-flow-control-notes/</link>
      <pubDate>Tue, 19 Jan 2021 08:11:23 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/01/19/sentinel-flow-control-notes/</guid>
      <description>最近考虑把工作中手头的一个鉴权服务加上限流的能力，由于接入业务方越来越多，服务的负载也越来越大，除了扩容外，服务本身也需要有限流降级的自我保护能力，避免被瞬时的流量高峰击垮，从而保障服务的高可用性。 sentinel-go</description>
    </item>
    
    <item>
      <title> Google Protobuf 编译器使用笔记</title>
      <link>https://maratrix.cn/post/2021/01/15/how-to-use-protoc-notes/</link>
      <pubDate>Fri, 15 Jan 2021 09:36:47 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/01/15/how-to-use-protoc-notes/</guid>
      <description>背景 Protobuf 是 google 开源的高性能序列化库，支持 C++、C#、Dart、Java、Go、Python、Rust 等语言，同时也是跨平台的。 Protobuf 包含序列化格式的定义、各种语言的库以及一个 IDL 编译器。正常情况下你需要定义 proto</description>
    </item>
    
    <item>
      <title>juju/ratelimit 令牌桶限流器分析</title>
      <link>https://maratrix.cn/post/2021/01/10/juju-ratelimit-read/</link>
      <pubDate>Sun, 10 Jan 2021 23:12:12 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/01/10/juju-ratelimit-read/</guid>
      <description>上一篇 我们介绍了基于漏桶算法的限流器 - uber-go/ratelimit，为了应对突发流量，它做了最大松弛量的改良。本篇文章继续介绍另外一种限流器：令牌桶（Token Bucket）。 什么是令牌桶 漏桶的</description>
    </item>
    
    <item>
      <title>uber-go/ratelimit 漏桶限流器分析</title>
      <link>https://maratrix.cn/post/2021/01/06/uber-go-ratelimit-read/</link>
      <pubDate>Wed, 06 Jan 2021 23:13:10 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2021/01/06/uber-go-ratelimit-read/</guid>
      <description>限流器是微服务中不可缺少的组件，起着保护下游服务负载过高、保证服务稳定性的作用。 什么是限流器 Web servers typically use a central in-memory key-value database, like Redis or Aerospike, for session management. A rate limiting algorithm is used to check if the user session (or IP address) has to be limited based on the information in the session cache. In case a client made too many requests within a given</description>
    </item>
    
    <item>
      <title>再见2020</title>
      <link>https://maratrix.cn/post/2020/12/31/2020-summary/</link>
      <pubDate>Thu, 31 Dec 2020 14:02:48 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/12/31/2020-summary/</guid>
      <description>第一次正式在博客公开写年终总结，其实之前也都有写，只是随手写在了某个笔记软件上，没有统一进行归档整理，更不方便查阅，然后就开始吃灰了。这次也许是个好的开始，希望以后年年坚持写下去。 2020 年确实过的很快，感</description>
    </item>
    
    <item>
      <title>[转]Go语言如何使用条件编译</title>
      <link>https://maratrix.cn/post/2020/12/17/go-cond-build/</link>
      <pubDate>Thu, 17 Dec 2020 23:00:41 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/12/17/go-cond-build/</guid>
      <description>当开发需要依赖底层平台或处理器体系特性的Go包时，提供对应的特定实现是非常有必要的。 Go没有预处理，没有宏定义系统，不可以像c语言那样使用#define来控制是否包含平台相关的特定代码。作为替代，Go</description>
    </item>
    
    <item>
      <title>Linux dd 命令使用详解</title>
      <link>https://maratrix.cn/post/2020/09/16/linux-comm-dd/</link>
      <pubDate>Wed, 16 Sep 2020 19:27:00 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/09/16/linux-comm-dd/</guid>
      <description>dd 命令介绍 Linux dd 命令用于读取、转换并输出数据。 dd 可从标准输入或文件中读取数据，根据指定的格式来转换数据，再输出到文件、设备或标准输出。 dd 命令使用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换。可</description>
    </item>
    
    <item>
      <title>Go源码阅读 | channel 设计与实现</title>
      <link>https://maratrix.cn/post/2020/08/25/go-channel-source-read/</link>
      <pubDate>Tue, 25 Aug 2020 22:40:45 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/08/25/go-channel-source-read/</guid>
      <description>本文基于 Go1.14 源码阅读 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91</description>
    </item>
    
    <item>
      <title>Go源码阅读 | context.Context设计与实现</title>
      <link>https://maratrix.cn/post/2020/07/12/go-context-source-read/</link>
      <pubDate>Sun, 12 Jul 2020 16:55:45 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/07/12/go-context-source-read/</guid>
      <description>本文基于 Go1.14.2 Go 自带的 context 包设计的很巧妙，最近阅读了下源码实现，可谓是短小精悍，很值得投入时间去学习。 什么是 context Go1.7 开始引入的 context 标准库包，主要用来在协程之间传递上下文信息，包括：取消信号、超时控制、截止时间、k</description>
    </item>
    
    <item>
      <title>如何借助Go指令生成随机数</title>
      <link>https://maratrix.cn/post/2020/06/14/go-fast-random/</link>
      <pubDate>Sun, 14 Jun 2020 18:36:57 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/06/14/go-fast-random/</guid>
      <description>如何在 Go 开发中高效而又快速地生成随机数呢？相信大家首先想到的就是使用标准库自带的 math/rand 包，或者使用开源的第三方包（比如 github.com/valyala/fastrand）来实现。 Go 运行时自带了 runtime.fastrand 函数来</description>
    </item>
    
    <item>
      <title>[转]简单围观一下有趣的//go:指令</title>
      <link>https://maratrix.cn/post/2020/06/13/go-directive-syntax/</link>
      <pubDate>Sat, 13 Jun 2020 09:11:02 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/06/13/go-directive-syntax/</guid>
      <description>前言 如果你平时有翻看源码的习惯，你肯定会发现。咦，怎么有的方法上面总是写着 //go: 这类指令呢。他们到底是干嘛用的？ 今天我们一同揭开他们的面纱，我将简单给你介绍一下，它们都负责些什么。 go:linkname 1 //go:linkname localname importpath.name 该指令指示编译</description>
    </item>
    
    <item>
      <title>Go源码阅读 | sync.WaitGroup设计与实现</title>
      <link>https://maratrix.cn/post/2020/04/25/go-sync-waitgroup-notes/</link>
      <pubDate>Sat, 25 Apr 2020 20:50:34 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/04/25/go-sync-waitgroup-notes/</guid>
      <description>前言 当我们的程序在运行过程中需要执行多个子任务时，我们可以利用 Go 协程并发地执行这些子任务，然后等待它们执行结束，从而缩短程序串行执行的耗费时间。Go 语言标准库自带了该组件：sync.WaitGroup</description>
    </item>
    
    <item>
      <title>Go源码阅读 | sync.Once设计与实现</title>
      <link>https://maratrix.cn/post/2020/04/21/go-sync-once-source-notes/</link>
      <pubDate>Tue, 21 Apr 2020 11:55:18 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/04/21/go-sync-once-source-notes/</guid>
      <description>介绍 sync.Once 是 Go 官方自带的标准库，实现了 exactly once 的功能。通过使用 sync.Once 我们可以很方便地实现单例模式，确保对象只被初始化一次。 首先看一个 sync.Once 的 Go 官方例子，源码链接在这里： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 var once sync.Once onceBody := func() { fmt.Println(&amp;#34;Only once&amp;#34;) }</description>
    </item>
    
    <item>
      <title>Go中如何实现禁止拷贝</title>
      <link>https://maratrix.cn/post/2020/04/20/go-nocopy-notes/</link>
      <pubDate>Mon, 20 Apr 2020 21:56:22 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/04/20/go-nocopy-notes/</guid>
      <description>背景 最近看 Go 标准库源码时经常遇到禁止拷贝对象的使用场景，比如当我们使用 strings.Builder 或者 sync.Pool 对象的时候会被禁止拷贝，这是如何实现的呢？ 主要有以下两种方式： 方式一：手动检查 这种需要我们在运行时通过 copyCheck 方法来检查是否发生</description>
    </item>
    
    <item>
      <title>Go源码阅读 | strings.Builder设计与实现</title>
      <link>https://maratrix.cn/post/2020/04/14/strings-builder-source-note/</link>
      <pubDate>Tue, 14 Apr 2020 11:55:41 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/04/14/strings-builder-source-note/</guid>
      <description>背景之字符串拼接 在 Go 语言中，对于字符串的拼接处理有很多种方法，那么那种方法才是效率最高的呢？ 1 2 3 4 5 6 str := []string{&amp;#34;aa&amp;#34;, &amp;#34;bb&amp;#34;, &amp;#34;cc&amp;#34;} ss := &amp;#34;&amp;#34; for _, s := range str { ss += s } fmt.Println(ss) 相信大部分人都会使用+操作符或者fmt.Sprinf进行</description>
    </item>
    
    <item>
      <title>Go Hijack黑科技</title>
      <link>https://maratrix.cn/post/2020/04/14/go-hijack-note/</link>
      <pubDate>Tue, 14 Apr 2020 11:53:21 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/04/14/go-hijack-note/</guid>
      <description>最近在看Go标准库里面的rpc源码，发现了下面一段代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // ServeHTTP implements an http.Handler that answers RPC requests. func (server *Server) ServeHTTP(w http.ResponseWriter, req *http.Request) { if req.Method != &amp;#34;CONNECT&amp;#34; { w.Header().Set(&amp;#34;Content-Type&amp;#34;, &amp;#34;text/plain; charset=utf-8&amp;#34;) w.WriteHeader(http.StatusMethodNotAllowed) io.WriteString(w, &amp;#34;405 must CONNECT\n&amp;#34;) return } conn, _, err := w.(http.Hijacker).Hijack() //注意看这里 if err != nil { log.Print(&amp;#34;rpc hijacking &amp;#34;, req.RemoteAddr, &amp;#34;: &amp;#34;, err.Error())</description>
    </item>
    
    <item>
      <title>Nginx基于权重的轮询算法实现</title>
      <link>https://maratrix.cn/post/2020/04/14/smooth-weighted-round-robin/</link>
      <pubDate>Tue, 14 Apr 2020 11:47:28 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/04/14/smooth-weighted-round-robin/</guid>
      <description>Nginx平滑的基于权重轮询算法描述为： Algorithm is as follows: on each peer selection we increase current_weight of each eligible peer by its weight, select peer with greatest current_weight and reduce its current_weight by total number of weight points distributed among peers. 算法执行2步，选择出1个当前节点： 每个节点，用它们的当前值加上它们自己的权重。 选择当前值</description>
    </item>
    
    <item>
      <title>关于本站</title>
      <link>https://maratrix.cn/about/</link>
      <pubDate>Fri, 10 Apr 2020 00:13:27 +0000</pubDate>
      
      <guid>https://maratrix.cn/about/</guid>
      <description>不期速成，日拱一卒，浮躁时代做个专注的人！ 北漂民工 | 斜杠青年 | 知行合一 | 后续&amp;hellip;&amp;hellip; 前言 MARATRIX BLOG 就这么开通了。 2020 年，总算有个地方可以好好写点东西了。 这年头还有人写 Blog 么，我也不知道为</description>
    </item>
    
    <item>
      <title>阅读</title>
      <link>https://maratrix.cn/read/</link>
      <pubDate>Fri, 10 Apr 2020 00:13:27 +0000</pubDate>
      
      <guid>https://maratrix.cn/read/</guid>
      <description>为梦想而努力，向大佬们看齐，见贤思齐焉，这是他们的书单！ 曹大的书单 芮神的书单 潘少的书单 Go 夜读发起人书单 2020 年读书笔记</description>
    </item>
    
    <item>
      <title>Rust学习笔记007-所有权</title>
      <link>https://maratrix.cn/post/2020/02/06/007-rust-ownership-notes/</link>
      <pubDate>Thu, 06 Feb 2020 10:01:58 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/02/06/007-rust-ownership-notes/</guid>
      <description>什么是所有权 Rust的核心功能（之一）就是所有权，其令 Rust 无需垃圾回收即可保障内存安全。 所有运行的程序都必须管理其使用计算机内存的方式： 一些语言中具有垃圾回收机制，在程序运行时不断地寻找不再使用的内存；</description>
    </item>
    
    <item>
      <title>Rust学习笔记006-控制流</title>
      <link>https://maratrix.cn/post/2020/02/05/006-rust-control-notes/</link>
      <pubDate>Wed, 05 Feb 2020 10:00:51 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/02/05/006-rust-control-notes/</guid>
      <description>if表达式 Rust的if...else if ... else基本语法和大多编程语言类似，这里不再赘述。 1 2 3 4 5 6 7 if条件{//... }elseif条件{//... }else{//... } 注意，这里的条件表达式不包含()括号，直</description>
    </item>
    
    <item>
      <title>Rust学习笔记005-函数</title>
      <link>https://maratrix.cn/post/2020/02/05/005-rust-functions-notes/</link>
      <pubDate>Wed, 05 Feb 2020 09:59:52 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/02/05/005-rust-functions-notes/</guid>
      <description>函数定义 使用fn关键字定义函数； 函数名使用snake_case规范命名； 函数可以定义在main函数之前或之后，Rust 不关心函数定义于何处； 1 2 3 fn test_function(a: i32,b: bool)-&amp;gt; u32 {//... } 函数参数 函数可以定义多个参数，使用逗号,</description>
    </item>
    
    <item>
      <title>Rust学习笔记004-数据类型</title>
      <link>https://maratrix.cn/post/2020/02/05/004-rust-types-notes/</link>
      <pubDate>Wed, 05 Feb 2020 09:51:09 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/02/05/004-rust-types-notes/</guid>
      <description>前言 Rust是静态类型语言，在编译时就必须知道所有变量的类型。 两种方式确定类型： 根据值及使用方式，编译器通常可以推断出我们想要用的类型； 当多种类型均有可能时，必须增加类型注解； 如下代码，不加类型编译会</description>
    </item>
    
    <item>
      <title>Rust学习笔记003-变量与可变性</title>
      <link>https://maratrix.cn/post/2020/02/04/003-rust-variable-notes/</link>
      <pubDate>Tue, 04 Feb 2020 09:49:40 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/02/04/003-rust-variable-notes/</guid>
      <description>变量声明 语法格式： 1 2 let变量名: 变量类型=变量值;letvar: i32 =123; 有几点要注意： 以关键字let开头，类型一定跟在冒号:后面； 变量必须先声明，初始化后才能使用； 初始化 Rust中，每个变量必须被合理</description>
    </item>
    
    <item>
      <title>Rust学习笔记002-编程概念</title>
      <link>https://maratrix.cn/post/2020/02/04/002-rust-notes/</link>
      <pubDate>Tue, 04 Feb 2020 09:45:34 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/02/04/002-rust-notes/</guid>
      <description>标识符 Rust 中的名称被称为 “标识符”（“identifier”），它们可以是任意非空的 ASCII 字符串，不过有如下限制： 要么是： 第一个字符是字母。 其它字符是字母数字或者 _。 或者是： 第一个字符是 _。 标识符需多于一个</description>
    </item>
    
    <item>
      <title>Rust学习笔记001-初相识</title>
      <link>https://maratrix.cn/post/2020/02/04/001-rust-hello-world-notes/</link>
      <pubDate>Tue, 04 Feb 2020 09:45:20 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/02/04/001-rust-hello-world-notes/</guid>
      <description>Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety. Rust是一门系统级编程语言，具有三个特点： 运行快 防止段错误 保证线程安全 C和C++是业界最流行的系统编程语言，Rust的定位与之类似，但是增加了安全性。 版本和发布策略 语</description>
    </item>
    
    <item>
      <title>Rust学习笔记000-安装</title>
      <link>https://maratrix.cn/post/2020/02/04/000-rust-install-notes/</link>
      <pubDate>Tue, 04 Feb 2020 09:40:42 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2020/02/04/000-rust-install-notes/</guid>
      <description>今天正式开始学Rust。 安装 学习一门新语言，第一件事当然是先安装。官方推荐使用rustup工具来管理安装，并提供一键安装命令，只需要在终端执行以下命令即可： 1 curl --proto &amp;#39;=https&amp;#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh 其实就是，先下载安装rus</description>
    </item>
    
    <item>
      <title>Go踩坑系列 | 为什么request.URL.Scheme取不到值</title>
      <link>https://maratrix.cn/post/2019/09/28/go-url-scheme-notes/</link>
      <pubDate>Sat, 28 Sep 2019 10:18:10 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2019/09/28/go-url-scheme-notes/</guid>
      <description>遇到的问题 最近在阅读echo框架的源码，发现context.go文件在读取请求的scheme时是单独封装了个方法。就很奇怪，go语言标准库不是自带了方法吗，干嘛不用？ 于是写了段代码来验证： 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>Go踩坑系列 | json标准库string标签你用对了么</title>
      <link>https://maratrix.cn/post/2019/09/05/go-json-string-tag-notes/</link>
      <pubDate>Thu, 05 Sep 2019 10:15:11 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2019/09/05/go-json-string-tag-notes/</guid>
      <description>工作中，我们会经常用到Go自带的json标准库，使用也很简单，具体用法这里不多说。 有的时候上游传过来的字段是string类型的，但是我们却想用变成int来使用。 本来用一个json:&amp;quot;,str</description>
    </item>
    
    <item>
      <title>Go服务平滑重启实践</title>
      <link>https://maratrix.cn/post/2019/07/31/go-overseer-notes/</link>
      <pubDate>Wed, 31 Jul 2019 10:12:16 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2019/07/31/go-overseer-notes/</guid>
      <description>为了实现Golang业务的平滑重载，研究了一下github上比较成熟的解决方案，找到如下三个库： grace endless overseer 大致看了一下源码，grace和endless是比较像的，实现步骤如下： 监听信号 收到信号时fork子</description>
    </item>
    
    <item>
      <title>go:linkname用法</title>
      <link>https://maratrix.cn/post/2019/07/12/go-linkname-syntax-notes/</link>
      <pubDate>Fri, 12 Jul 2019 10:10:42 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2019/07/12/go-linkname-syntax-notes/</guid>
      <description>什么是go:linkname 这里引用Go官方文档的解释： //go:linkname localname importpath.name The //go:linkname directive instructs the compiler to use “importpath.name” as the object file symbol name for the variable or function declared as “localname” in the source code. Because this directive can subvert the type system and package modularity, it is only enabled in</description>
    </item>
    
    <item>
      <title>Hello 2017</title>
      <link>https://maratrix.cn/post/2017/01/01/hello-2017/</link>
      <pubDate>Sun, 01 Jan 2017 15:48:02 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2017/01/01/hello-2017/</guid>
      <description>现在是 2017 年，好久没有更新博客了，想起来从15年暑假来北京实习到现在已经 1 年多了，经历了很多，慢慢也成长了，一直有很多话想说，真要写的时候有发现无从写起 &amp;hellip; 2022.01.27 整理：当年的自己竟然还是个多愁善感的骚年啊😂</description>
    </item>
    
    <item>
      <title>如何正常转换中文json格式字符串</title>
      <link>https://maratrix.cn/post/2015/07/09/use_json_note/</link>
      <pubDate>Thu, 09 Jul 2015 15:20:57 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2015/07/09/use_json_note/</guid>
      <description>如何对json格式的字符串进行转换，在php手册中提供了两个函数： 1 2 json_encode : 对变量进行 JSON 编码 json_decode : 对 JSON 格式的字符串进行编码 下面看个实例： 1 2 $arr = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]; echo json_encode($arr); 输出为： 1 [“a”,”b”,”c”] 但是，当我们在</description>
    </item>
    
    <item>
      <title>如何在MySQL中高效的存储ip地址</title>
      <link>https://maratrix.cn/post/2015/06/20/mysql_save_ip/</link>
      <pubDate>Sat, 20 Jun 2015 15:20:57 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2015/06/20/mysql_save_ip/</guid>
      <description>在多数场景下，我们一般在MySQL中存储ip地址时都使用varchar(15)或者char(15)类型，是吧？ 虽说功能是实现了，但是这样构建数据表就能最大限度的优化数据库性能吗？答案是否定的，尽管在存</description>
    </item>
    
    <item>
      <title>一道面试题引发的一点点思考</title>
      <link>https://maratrix.cn/post/2015/06/12/shuffle_array_note/</link>
      <pubDate>Fri, 12 Jun 2015 15:20:57 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2015/06/12/shuffle_array_note/</guid>
      <description>到了大三下学期，身边的小伙伴都不约而同地开始找实习了，其中面试当然是不可缺少的重头戏啦。 最近在面百度的时候，面试官的一道关于随机数的题很有意思，不算难，但却在那么一瞬间触动了我，所以打算抽点时间把它记</description>
    </item>
    
    <item>
      <title>MySQL中使用binary查询字符串</title>
      <link>https://maratrix.cn/post/2015/06/07/mysql_str_binary/</link>
      <pubDate>Sun, 07 Jun 2015 15:20:57 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2015/06/07/mysql_str_binary/</guid>
      <description>今天，在做老师布置的实验作业时候遇到一个关于MySQL字符串比较问题。场景是这样的，就是需要在数据库中查询记录而进行字符串比较时，需要对字符串进行大小写区分比较，这样在默认情况下进行操作可能不会达到你</description>
    </item>
    
    <item>
      <title>禁用COOKIE后如何访问SESSION问题</title>
      <link>https://maratrix.cn/post/2015/06/04/how_to_use_session_without_cookie/</link>
      <pubDate>Thu, 04 Jun 2015 15:20:57 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2015/06/04/how_to_use_session_without_cookie/</guid>
      <description>最近看到一个有关在PHP中使用COOKIE会话管理的面试题，不单单是因为这道题很有意思，还有就是自己以前确实没有想到过这个方面（知识欠缺:P），所以这里做个记录总结下，该题大概是这样描述的: 1 如何不使</description>
    </item>
    
    <item>
      <title>关于在PDO中使用bindParam绑定参数的陷阱</title>
      <link>https://maratrix.cn/post/2015/05/13/pdo_bindParam_bug_note/</link>
      <pubDate>Wed, 13 May 2015 15:20:57 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2015/05/13/pdo_bindParam_bug_note/</guid>
      <description>今天，在看鸟哥@laruence的个人博客时看到了有关在PHP中使用PDO的bindParam绑定方法结合循环语句来使用时会产生一个BUG或者小陷阱，这里做个笔记备忘 :) 来自PHP官方的BUG报告在这里</description>
    </item>
    
    <item>
      <title>无锁共享内存---Yac</title>
      <link>https://maratrix.cn/post/2015/04/20/yac_study_and_vs_memcache_note/</link>
      <pubDate>Mon, 20 Apr 2015 15:20:57 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2015/04/20/yac_study_and_vs_memcache_note/</guid>
      <description>这几天一直在研究鸟哥@laruence的一个产品—Yac，它是为PHP实现的一个基于共享内存、并且无锁的User Data Cache。今天比较了下Memcache和Yac的高并发读写性能测试，发现Yac要比M</description>
    </item>
    
    <item>
      <title>缓存无底洞现象</title>
      <link>https://maratrix.cn/post/2015/03/30/memcache_multiget_hole_note/</link>
      <pubDate>Mon, 30 Mar 2015 15:20:57 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2015/03/30/memcache_multiget_hole_note/</guid>
      <description>该问题由facebook 的工作人员提出的, facebook 在2010 年左右,memcached 节点就已经达 3000 个,缓存数千G 内容. 他们发现了一个问题，即由于memcache连接频繁，导致效率下降了。于是他们开始添加m</description>
    </item>
    
    <item>
      <title>Memcache过期数据惰性和LRU删除机制</title>
      <link>https://maratrix.cn/post/2015/03/29/memcache_item_delete_note/</link>
      <pubDate>Sun, 29 Mar 2015 15:30:57 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2015/03/29/memcache_item_delete_note/</guid>
      <description>Memcache是缓存，所以数据不会永久保存在服务器上，这也是在服务器上引进Memcache的前提。当我们在memcache中存放数据时会设置超时时间（不设置，默认为永久有效，但不排除会被新数据剔除的</description>
    </item>
    
    <item>
      <title>永久数据丢失现象</title>
      <link>https://maratrix.cn/post/2015/03/29/memcache_perpetual_data_lose/</link>
      <pubDate>Sun, 29 Mar 2015 15:20:57 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2015/03/29/memcache_perpetual_data_lose/</guid>
      <description>有时候，在我们使用memcache过程中会出现”数据丢失”的现象， 也就是说明明数据被设为永久有效，却莫名其妙的丢失了，这是怎么回事呢？ 在上一篇博客Memcache过期数据惰性和LRU删除机制中已经总结</description>
    </item>
    
    <item>
      <title>Memcache的内存分配管理</title>
      <link>https://maratrix.cn/post/2015/03/28/memcache_memory_manage_note/</link>
      <pubDate>Sat, 28 Mar 2015 15:20:57 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2015/03/28/memcache_memory_manage_note/</guid>
      <description>首先，我们要明白什么是内存的碎片化，要解释这个也不困难。大概可以这样描述，如果用c 语言直接malloc,free 来向操作系统申请和释放内存时,在不断的申请和释放过程中,形成了一些很小的内存片断,无法再</description>
    </item>
    
    <item>
      <title>MySQL数据库主从复制</title>
      <link>https://maratrix.cn/post/2015/03/20/mysql_and_slave_test/</link>
      <pubDate>Fri, 20 Mar 2015 15:20:57 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2015/03/20/mysql_and_slave_test/</guid>
      <description>MySQL数据库主从复制的工作方式很简单，一台主机作为主服务器，一台或者多台主机作为从服务器。主服务器会把数据库的变化记录到日志，一旦这些变化被记录到日志，就会马上或者以固定的时间间隔被发送从服务器，</description>
    </item>
    
    <item>
      <title>大学最后一个寒假</title>
      <link>https://maratrix.cn/post/2015/03/07/winter_holiday_conclusion/</link>
      <pubDate>Sat, 07 Mar 2015 15:22:17 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2015/03/07/winter_holiday_conclusion/</guid>
      <description>猛地意识到今天就已经是3月7日了，而我买的是明天的火车票，对于我来说意味着毫无防备并且来不及拾掇就要滚回学校了。呜呼，时间过的真TM快，将近俩月的大学最后一个大长假就这么一睁眼一闭眼就嗝屁（方言）了,</description>
    </item>
    
    <item>
      <title>Kindle爱之初体验</title>
      <link>https://maratrix.cn/post/2015/02/07/experience_of_kindle/</link>
      <pubDate>Sat, 07 Feb 2015 15:20:57 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2015/02/07/experience_of_kindle/</guid>
      <description>自入手kindle差不多已经一个月了，这将近一个月的阅读体验确实本人感概良多，发现自己更爱读书了，也逐渐喜欢上和离不开 kindle了（推荐给喜欢阅读的小伙伴们~）。其实，早就有写一篇博客来记录这段时间</description>
    </item>
    
    <item>
      <title>Vim使用技巧-快速加密</title>
      <link>https://maratrix.cn/post/2014/12/22/vim_miracle_encrypt_note/</link>
      <pubDate>Mon, 22 Dec 2014 15:11:22 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/12/22/vim_miracle_encrypt_note/</guid>
      <description>我们知道对于Linux服务器来说是支持多用户多任务环境的，聪明的Linux同学给我们每个用户都有各自的权限，彼此工作互不干扰。但是环境中有一个Super man存在呢，谁拥有它的权限就可以‘偷窥’别人隐</description>
    </item>
    
    <item>
      <title>Tmux进阶篇</title>
      <link>https://maratrix.cn/post/2014/12/02/copy_model_note/</link>
      <pubDate>Tue, 02 Dec 2014 15:11:22 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/12/02/copy_model_note/</guid>
      <description>今天是12月1日，昨天是今年沈阳下的第一场雪，阴沉沉的天气下了整整一天，虽然不是很大但却是刺骨的冷，由于特么太冷我上午钻进实验室，一天几乎没出去，懒人就是这样。另外就是觉得现在的天气真是扭曲（天气不正</description>
    </item>
    
    <item>
      <title>潇洒的Tmux结对编程</title>
      <link>https://maratrix.cn/post/2014/12/01/program_with_each_other/</link>
      <pubDate>Mon, 01 Dec 2014 15:11:22 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/12/01/program_with_each_other/</guid>
      <description>本来计划是一天总结一篇Tmux使用技巧的，但是现在真的忍不住要提前介绍一个更炫酷的关于使用Tmux的技巧了，哈哈，技术控嘛，碰到新鲜的而自己又喜欢的技术肯定是不会放过的，破例一下。 Tmux另一个很潇洒</description>
    </item>
    
    <item>
      <title>配置篇-玩转Tmux</title>
      <link>https://maratrix.cn/post/2014/11/30/happy-tmux/</link>
      <pubDate>Sun, 30 Nov 2014 15:11:22 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/11/30/happy-tmux/</guid>
      <description>上一篇，我们已经安装好了我们的威猛先生Tmux神器。既然被称为是神器，肯定是其被人称道的地方，那么现在就来动手亲自配置我们的Tmux，初体验她的酷以及可定制化。 废话不多说，下面开始吧。。。 常用快捷键 T</description>
    </item>
    
    <item>
      <title>SSL/TLS协议概述</title>
      <link>https://maratrix.cn/post/2014/11/02/ssl_tls_secure_notes/</link>
      <pubDate>Sun, 02 Nov 2014 15:11:22 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/11/02/ssl_tls_secure_notes/</guid>
      <description>不使用SSL/TLS协议的HTTP通信，就是不加密的通信，所有信息都是明文传播。在这个不安全的网络上，当我们涉及金钱的交易时，如果信息使用明文传输，光是想想都觉得可怕（假如支付宝使用明文的HTTP协议</description>
    </item>
    
    <item>
      <title>初次认识Tmux</title>
      <link>https://maratrix.cn/post/2014/11/29/tmux-intro/</link>
      <pubDate>Sun, 02 Nov 2014 15:11:22 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/11/29/tmux-intro/</guid>
      <description>最近，刚接触了命令行神器Tmux,然后瞬间被她的神奇所吸引，真是相见很晚啊！！ Tmux是一个优秀的终端复用软件，使用它最直观的好处就是，通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制</description>
    </item>
    
    <item>
      <title>如何高效管理我们的时间</title>
      <link>https://maratrix.cn/post/2014/10/30/how_to_manage_our_time/</link>
      <pubDate>Thu, 30 Oct 2014 14:56:00 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/10/30/how_to_manage_our_time/</guid>
      <description>不知道大家有没有发现，有时候一天过去了却发现自己好像什么都没干。不要虚伪，我相信每个人都会碰到这种情况的，所以不要说在你身上没有发生过。说到底，原因是我们没有充分以及高效的利用好我们时间，总被各种繁琐</description>
    </item>
    
    <item>
      <title>MySQL实现增量备份小结</title>
      <link>https://maratrix.cn/post/2014/10/21/mysql_mysqlbinlog_dump_note/</link>
      <pubDate>Tue, 21 Oct 2014 14:56:00 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/10/21/mysql_mysqlbinlog_dump_note/</guid>
      <description>当我们误删了MySQL数据库某张表中的数据或者整张表，我们可以使用MySQL的增量备份机制来实现误删数据的恢复，接下来就来总结下MySQL的增量备份技术是如何实现的，以及其中需要我们注意的事项！ 首先，</description>
    </item>
    
    <item>
      <title>MyISAM存储引擎的碎片整理问题</title>
      <link>https://maratrix.cn/post/2014/10/19/mysql_myisam_data_optimize/</link>
      <pubDate>Sun, 19 Oct 2014 14:56:00 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/10/19/mysql_myisam_data_optimize/</guid>
      <description>最近，在使用MySQL数据库的MyISAM存储引擎建表，并且在删除大量数据时，发现在本地硬盘放置的的data文件并没有改变大小。碰到这种情况，笔者甚是郁闷而又感到奇怪，经查阅资料，终于解决了该问题。 问</description>
    </item>
    
    <item>
      <title>PHP检测gif图片是否为动态图片</title>
      <link>https://maratrix.cn/post/2014/10/15/check_gif_picture/</link>
      <pubDate>Wed, 15 Oct 2014 14:56:00 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/10/15/check_gif_picture/</guid>
      <description>当我们使用php自带的getimagesize()函数来判断一个gif图片是否为动态（动画）时，发现无法判别是否为动态的效果。本文介绍了php是如何判断gif图片是否为动画的方法，具体步骤如下： 经过G</description>
    </item>
    
    <item>
      <title>PHP实现异步执行</title>
      <link>https://maratrix.cn/post/2014/10/11/php_simulation_asynchroous/</link>
      <pubDate>Sat, 11 Oct 2014 14:56:00 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/10/11/php_simulation_asynchroous/</guid>
      <description>对于php而言本身没有提供多线程这个东西，但是可以通过其他方式做出同样的效果，即一中方式就是使用fsockopen()函数和fwrite()函数来请求一个url，然后不用等待该返回结果，所以当我们在被</description>
    </item>
    
    <item>
      <title>正则表达式---环视</title>
      <link>https://maratrix.cn/post/2014/10/07/the_regular_expression_look_around/</link>
      <pubDate>Tue, 07 Oct 2014 14:56:00 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/10/07/the_regular_expression_look_around/</guid>
      <description>在正则表达式中，断言用来声明一个应该为真的事实，只有断言为真时才会继续进行匹配。不过要记得哦，断言只是匹配一个事实，而不是内容。这里介绍的断言，他们用于查找在某些内容之前或者之后，也就是一个位置应该满</description>
    </item>
    
    <item>
      <title>细节，深刻又尴尬的教训</title>
      <link>https://maratrix.cn/post/2014/09/26/details_with_attitude/</link>
      <pubDate>Fri, 26 Sep 2014 14:52:04 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/09/26/details_with_attitude/</guid>
      <description>今天，做了一件让我自己都觉得羞愧的事，感觉自己就像一个小丑，都是自己太粗心大意了，或者说自己也太不注意细节问题了。 现在，大部分人当然也包括此刻以前的我(此刻已改变)，都觉得凡事都不用太在乎细节，逢人便</description>
    </item>
    
    <item>
      <title>不要浪费人生的每一天</title>
      <link>https://maratrix.cn/post/2014/09/23/dropbox_mit_speech/</link>
      <pubDate>Tue, 23 Sep 2014 14:52:04 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/09/23/dropbox_mit_speech/</guid>
      <description>今天分享一个演讲，演讲人是Dropbox创始人，他向我们毕业或者在校大学生提出了3点人生建议，但是可能也同样适用于你MIT演讲：只和出色的人在一起，不浪费生命的每一天 Dropbox创始人，CEO德鲁·</description>
    </item>
    
    <item>
      <title>JavaScript之词法分析</title>
      <link>https://maratrix.cn/post/2014/09/12/js_analysis/</link>
      <pubDate>Fri, 12 Sep 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/09/12/js_analysis/</guid>
      <description>js是一门简单的严格面向对象语言，对于刚开始学习js的菜鸟来说，要想学好js有两条链是必须要掌握的，它们分别是： 作用域链 面向对象原型链 这里简单总结下有关作用域链的问题，首先要求我们得懂的js的词法分析</description>
    </item>
    
    <item>
      <title>Shell脚本的执行方式区别</title>
      <link>https://maratrix.cn/post/2014/08/22/shell_script_source_and_bash/</link>
      <pubDate>Fri, 22 Aug 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/08/22/shell_script_source_and_bash/</guid>
      <description>不同的Shell脚本执行方式会造成不一样的后果，尤其对bash的环境影响很大。shell脚本的执行方式除了（绝对路径、相对路径、bash、sh）执行外，还可以利用source来执行，那么他们之间有什么</description>
    </item>
    
    <item>
      <title>Sed数据处理</title>
      <link>https://maratrix.cn/post/2014/08/17/linux-sed/</link>
      <pubDate>Sun, 17 Aug 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/08/17/linux-sed/</guid>
      <description>在Linux下有两个非常强大的数据处理工具，一个是sed，另一个是awk。这里暂且介绍sed如何使用好了，作为备忘笔记，以便以后查看。 sed本身是一个管道命令，可以分析stdin的，而且sed可以将数</description>
    </item>
    
    <item>
      <title>Linux下语系编码问题总结</title>
      <link>https://maratrix.cn/post/2014/08/11/linux-code-type/</link>
      <pubDate>Mon, 11 Aug 2014 22:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/08/11/linux-code-type/</guid>
      <description>我们都知道，我们操作系统的文件都会有一个编码格式[比如：utf8、gb2312…],但是很多情况下，我们会需要将现有文件的语系编码进行转换，比如将utf8的文件转换为gb2312格式，那该怎么办？难道</description>
    </item>
    
    <item>
      <title>简明VIM练级备忘笔记</title>
      <link>https://maratrix.cn/post/2014/08/11/vim-study/</link>
      <pubDate>Mon, 11 Aug 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/08/11/vim-study/</guid>
      <description>特此声明：本文以及链接参考自[左耳朵耗子]的酷壳站点 vim的学习曲线相当的大，所以，如果你一开始看到的是一大堆VIM的命令分类，你一定会对这个编辑器失去兴趣的。所以如果你想以最快的速度学习人类史上最好</description>
    </item>
    
    <item>
      <title>SESSION安全性问题</title>
      <link>https://maratrix.cn/post/2014/08/06/session_safe_notes/</link>
      <pubDate>Wed, 06 Aug 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/08/06/session_safe_notes/</guid>
      <description>一直以来很多开发者都认为php内置的session管理机制是具有一定的安全性，可以对一般的session攻击起到防御。事实上，这是一种误解，php团队只实现了一种方便有效的机制。具体的安全措施，应该有</description>
    </item>
    
    <item>
      <title>PHP程序操作Memcache笔记</title>
      <link>https://maratrix.cn/post/2014/07/30/memcache_php_notes/</link>
      <pubDate>Wed, 30 Jul 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/07/30/memcache_php_notes/</guid>
      <description>上一篇说明telnet操作memcache时就提到有两中方式来操作memcache，一种是通过telnet工具，另一种是通过程序控制，下面简单总结下关于使用PHP程序来操作memcache步骤以及细节</description>
    </item>
    
    <item>
      <title>Telnet操作memcached服务</title>
      <link>https://maratrix.cn/post/2014/07/29/memcache_telnet_notes/</link>
      <pubDate>Tue, 29 Jul 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/07/29/memcache_telnet_notes/</guid>
      <description>我们知道，操作memcached有两种方式，分别是通过telnet和php程序来控制，其中php程序控制是主要方面，主要包括三种类型，如下图： pic 首先，我们要先在cmd控制台中开启memcached服务</description>
    </item>
    
    <item>
      <title>网站在线支付总结</title>
      <link>https://maratrix.cn/post/2014/07/28/php_web_pay_notes/</link>
      <pubDate>Mon, 28 Jul 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/07/28/php_web_pay_notes/</guid>
      <description>最近，在做一个购物商城的项目时，其中购买商品用到了关于网站在线支付的技术，就好好研究了下关于网站在线支付的流程与实现原理以及一些特别需要注意的地方。特此总结，备忘，以便查阅！ 大家都知道，在电子商务告诉</description>
    </item>
    
    <item>
      <title>不要做一个浮躁的程序员</title>
      <link>https://maratrix.cn/post/2014/07/21/life_essay_3/</link>
      <pubDate>Mon, 21 Jul 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/07/21/life_essay_3/</guid>
      <description>今天看到一篇关于编程感悟的博客，大概意思说的是做编程、做技术（其实就是程序员呀）这行，切忌心浮气躁、急功近利，要让自己的内心静下来、沉淀下来，踏踏实实去做，每天进步一点点，然后坚持下去，肯定会学有所成</description>
    </item>
    
    <item>
      <title>Git分布式版本控制系统总结</title>
      <link>https://maratrix.cn/post/2014/07/15/git_summary_notes/</link>
      <pubDate>Tue, 15 Jul 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/07/15/git_summary_notes/</guid>
      <description>经过这段时间对Git分布式版本控制系统的学习，对Git已经初步掌握，简单的配置和使用应该不是问题了，并且Git分支管理版本库以及多人协作的策略的思想还是比较好的，确实很优秀。 Git虽然极其强大，命令繁</description>
    </item>
    
    <item>
      <title>0.1&#43;0.2=0.3？</title>
      <link>https://maratrix.cn/post/2014/07/14/php_float_false_notes/</link>
      <pubDate>Mon, 14 Jul 2014 22:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/07/14/php_float_false_notes/</guid>
      <description>先看一段程序代码，判断下输出会是什么： 1 2 3 4 5 6 7 8 &amp;lt;?php $a = 0.2; $b = 0.1; if (($a + $b) == 0.3) { echo &amp;#39;值为0.3&amp;#39;; } else { echo &amp;#39;值不为0.3&amp;#39;; } ?&amp;gt; 结果会输出什么？会输出 值为0.3 ？ 错误</description>
    </item>
    
    <item>
      <title>PHP生成扭曲验证码</title>
      <link>https://maratrix.cn/post/2014/07/13/php_distorted_code/</link>
      <pubDate>Sun, 13 Jul 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/07/13/php_distorted_code/</guid>
      <description>为了防止网站被机器人灌水，现在网站的各种验证码广泛存在，为安全性起到了一定的作用。 验证码的样式有很多样，这里笔者只是总结下扭曲验证码的制作过程及其原理介绍，也算是备忘的笔记吧。 原理介绍 这里不再赘余生成</description>
    </item>
    
    <item>
      <title>Memcached缓存技术原理与安装</title>
      <link>https://maratrix.cn/post/2014/07/12/memcached_install_notes/</link>
      <pubDate>Sat, 12 Jul 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/07/12/memcached_install_notes/</guid>
      <description>Memcached 是以LiveJournal旗下Danga Interactive公司的Brad Fitzpatric为首开发的一款内存缓存软件。Memcached是一种缓存技术，它可以把数据放入内存，从而可以通过内存访</description>
    </item>
    
    <item>
      <title>就当我在扯淡</title>
      <link>https://maratrix.cn/post/2014/07/10/life_essay_2/</link>
      <pubDate>Thu, 10 Jul 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/07/10/life_essay_2/</guid>
      <description>今天是学校暑假放假回家后的第一天，我不知道这个暑假会不会是最后一次在家过暑假了，但总感觉很有可能是，因为也快要出去实习了嘛，以前在总觉得实习离我还很遥远，就那样“悠闲的”度过了我的大一大二，暑假过后我</description>
    </item>
    
    <item>
      <title>版本控制系统配置别名</title>
      <link>https://maratrix.cn/post/2014/07/07/git_config_aliase_notes/</link>
      <pubDate>Mon, 07 Jul 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/07/07/git_config_aliase_notes/</guid>
      <description>有时候，会觉得Git的命令太长又不好记住，那么能不能做到简短呢？答案当然是肯定的啦！ 比如说git status这个命令对有些人来说就很长，不容易记住，如果可以这样git st使用那就好了，我们强大的Git</description>
    </item>
    
    <item>
      <title>Gitignore忽略特殊文件操作</title>
      <link>https://maratrix.cn/post/2014/07/05/git_gitignore_file_notes/</link>
      <pubDate>Sat, 05 Jul 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/07/05/git_gitignore_file_notes/</guid>
      <description>有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次git status都会显示“Untracked files &amp;hellip;”，有强迫症的心里肯定不爽</description>
    </item>
    
    <item>
      <title>创建标签和操作标签</title>
      <link>https://maratrix.cn/post/2014/07/04/git_create_tag_notes/</link>
      <pubDate>Fri, 04 Jul 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/07/04/git_create_tag_notes/</guid>
      <description>提交一个版本时，我们通常先在版本库中打一个标签，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。 创建标签</description>
    </item>
    
    <item>
      <title>Git推送分支和抓取分支</title>
      <link>https://maratrix.cn/post/2014/07/02/git-push/</link>
      <pubDate>Wed, 02 Jul 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/07/02/git-push/</guid>
      <description>当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。 要查看远程库的信息，用git remote： 1 2 $ git remote origin 可以使用</description>
    </item>
    
    <item>
      <title>Feature分支</title>
      <link>https://maratrix.cn/post/2014/06/30/git-feat/</link>
      <pubDate>Mon, 30 Jun 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/06/30/git-feat/</guid>
      <description>添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。 假设我们创建了一</description>
    </item>
    
    <item>
      <title>管理Bug分支</title>
      <link>https://maratrix.cn/post/2014/06/28/git-bug-branch/</link>
      <pubDate>Sat, 28 Jun 2014 00:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/06/28/git-bug-branch/</guid>
      <description>在项目开发中，bug就像家常便饭一样，随时都会出现。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。 当你</description>
    </item>
    
    <item>
      <title>Linux与Windows的断行符问题</title>
      <link>https://maratrix.cn/post/2014/06/27/unix-dos-crlf/</link>
      <pubDate>Fri, 27 Jun 2014 22:26:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/06/27/unix-dos-crlf/</guid>
      <description>在Linux系统中，当我们使用cat -A命令来查看以Windows建立的文件的格式时，可以发现在Windows中使用的断行符是^M$,被称为“CRLF”。而以Linux建立的文件格式却只有LF($)这</description>
    </item>
    
    <item>
      <title>PDO 事务处理</title>
      <link>https://maratrix.cn/post/2014/06/27/php-pdo/</link>
      <pubDate>Fri, 27 Jun 2014 22:25:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/06/27/php-pdo/</guid>
      <description>事务是确保数据库一致的机制，作为一个单元的一组有序的数据库操作。在事务的组中哪怕有一个环节操作失败，事务也不成功，则整个事务将被回滚，该事务中的所有操作都将被撤销。只有组中的所有SQL语句都操作成功，</description>
    </item>
    
    <item>
      <title>分支管理策略</title>
      <link>https://maratrix.cn/post/2014/06/27/git_branch_manage_notes/</link>
      <pubDate>Fri, 27 Jun 2014 22:20:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/06/27/git_branch_manage_notes/</guid>
      <description>通常，合并分支时，如果可能，Git会用“Fast forward”模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用“Fast forward”模式，Git就会在merge时生成一个新的com</description>
    </item>
    
    <item>
      <title>解决分支冲突问题</title>
      <link>https://maratrix.cn/post/2014/06/27/git_branch_conflicts_notes/</link>
      <pubDate>Fri, 27 Jun 2014 22:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/06/27/git_branch_conflicts_notes/</guid>
      <description>我们已经知道了如何去创建分支以及合并分支，但实际工作中合并分支并不总是像我们想象的那么一帆风顺，总会发生这样那样的冲突，下面说明下如何去解决如此的问题。 首先，创建一个分支dev，并添加新内容： 1 2 $ git</description>
    </item>
    
    <item>
      <title>创建与合并分支</title>
      <link>https://maratrix.cn/post/2014/06/27/git-branch/</link>
      <pubDate>Fri, 27 Jun 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/06/27/git-branch/</guid>
      <description>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。 如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了</description>
    </item>
    
    <item>
      <title>Git远程仓库配置</title>
      <link>https://maratrix.cn/post/2014/06/26/git-remote-set/</link>
      <pubDate>Thu, 26 Jun 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/06/26/git-remote-set/</guid>
      <description>首先，我们要了解Github这个神奇的网站，这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。所以我们要先注册一个github帐号。 由于你的本地G</description>
    </item>
    
    <item>
      <title>添加远程仓库和从远程仓库克隆</title>
      <link>https://maratrix.cn/post/2014/06/25/git-add-remote/</link>
      <pubDate>Wed, 25 Jun 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/06/25/git-add-remote/</guid>
      <description>现在，我们已经在本地创建了一个版本库，那么如何在Github创建了一个仓库，并且让这两个仓库进行远程同步呢？ 添加远程库 首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一</description>
    </item>
    
    <item>
      <title>版本库文件的管理</title>
      <link>https://maratrix.cn/post/2014/06/24/git-version-manage/</link>
      <pubDate>Tue, 24 Jun 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/06/24/git-version-manage/</guid>
      <description>撤销修改 现在，我们查看下one.txt文件： 1 2 3 4 $ cat one.txt git is the best I love git error content 假如，当我们没提交前，又想撤销这次的修改，那该怎么办呢？这时我们可以直接手动删除修改的内容，恢复到原来的版本。此时，我们可以</description>
    </item>
    
    <item>
      <title>版本库删除文件操作</title>
      <link>https://maratrix.cn/post/2014/06/23/git-del/</link>
      <pubDate>Mon, 23 Jun 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/06/23/git-del/</guid>
      <description>首先，我们要知道在Git中任何的操作都是一个修改，那删除文件肯定也是一个修改操作了，在工作区删除一个文件可以使用rm -f file的命令来操作： 1 $ rm -f one.txt 此时，Git已经知道你删除了文件，这时候的工作区和</description>
    </item>
    
    <item>
      <title>Git工作区和暂存区</title>
      <link>https://maratrix.cn/post/2014/06/22/git-work-stash/</link>
      <pubDate>Sun, 22 Jun 2014 21:14:30 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/06/22/git-work-stash/</guid>
      <description>首先，我们要清楚Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。下面来看几个概念： 工作区 工作区就是我们在电脑里看到的目录，比如我的learngit就是一个工作区。 版本库 在工作区中都有</description>
    </item>
    
    <item>
      <title>Git实现版本回退功能</title>
      <link>https://maratrix.cn/post/2014/06/21/git-version-reset/</link>
      <pubDate>Sat, 21 Jun 2014 21:11:27 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/06/21/git-version-reset/</guid>
      <description>现在，我们重新修改下文件并添加和提交到版本库： 1 2 3 $ echo &amp;#39;再次添加新内容&amp;#39; &amp;gt;&amp;gt; readme.md $ git add ./readme.md $ git commit -m &amp;#39;更新内容&amp;#39; 像这样，我们不断的对文件进行修改，并一次一次的提交到版本库。就</description>
    </item>
    
    <item>
      <title>安装分布式版本控制系统Git</title>
      <link>https://maratrix.cn/post/2014/06/20/git-install/</link>
      <pubDate>Fri, 20 Jun 2014 20:35:36 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/06/20/git-install/</guid>
      <description>Git是什么？Git是世界上最先进的分布式版本控制系统。 Git有什么特点？简单说就是：高端大气上档次！ 那么什么是版本控制系统呢？自己百度去。 很多人都知道，李纳斯创建了开源的Linux，从那时起Linu</description>
    </item>
    
    <item>
      <title>Git创建版本库和查看工作区状态</title>
      <link>https://maratrix.cn/post/2014/06/19/git-create/</link>
      <pubDate>Thu, 19 Jun 2014 20:31:25 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/06/19/git-create/</guid>
      <description>什么是版本库呢？版本库又名仓库，英文名repository，可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者</description>
    </item>
    
    <item>
      <title>PHP新增语法结构Traits</title>
      <link>https://maratrix.cn/post/2014/05/12/php-traits/</link>
      <pubDate>Mon, 12 May 2014 20:27:10 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/05/12/php-traits/</guid>
      <description>面向对象的优势在于类的复用，继承和多态都是对类进行复用，他们一个是类级别的复用，一个是方法级别的复用。其中提到继承必提组合，有什么区别呢。组合与继承都是提高代码可重用性的手段。通过总结，可以得出继承是</description>
    </item>
    
    <item>
      <title>PHP延迟静态绑定机制</title>
      <link>https://maratrix.cn/post/2014/05/11/php-static-bind/</link>
      <pubDate>Sun, 11 May 2014 20:24:12 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/05/11/php-static-bind/</guid>
      <description>自 PHP 5.3.0 起，PHP 增加了一个叫做后期静态绑定的功能，用于在继承范围内引用静态调用的类。准确说，后期静态绑定工作原理是存储了在上一个“非转发调用”的类名。当进行静态方法调用时，该类名即为明确指定的那个（通</description>
    </item>
    
    <item>
      <title>[转]批判的价值</title>
      <link>https://maratrix.cn/post/2014/05/10/critical-value/</link>
      <pubDate>Sat, 10 May 2014 19:36:05 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/05/10/critical-value/</guid>
      <description>Author:YinWang 总是有人告诉我，我不应该批评一些技术，特别是不应该在一些公认的“大牛”或者流行的技术头上动土。要做出自己的“成果”，这样才可以得到大家的“尊重”。首先，你可能没有发现，被我批判得最厉害的技术和人，其</description>
    </item>
    
    <item>
      <title>开心写程序，快乐过生活</title>
      <link>https://maratrix.cn/post/2014/03/07/hello-world/</link>
      <pubDate>Fri, 07 Mar 2014 19:28:45 +0800</pubDate>
      
      <guid>https://maratrix.cn/post/2014/03/07/hello-world/</guid>
      <description>这是开通 CSDN 后的第一篇博客，呵呵，工科男就是这样，刚开始真的就是不知道该怎么去写出心中的想法和情感，也许就是碍于面子，怕被别人成为“屌丝”，希望自己可以这么坚持下去。 说实话，编程真的很枯燥，枯燥的有时会</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://maratrix.cn/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://maratrix.cn/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://maratrix.cn/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://maratrix.cn/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
